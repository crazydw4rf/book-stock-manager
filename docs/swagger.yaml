basePath: /api/v1
definitions:
  model.BookResponse:
    properties:
      author:
        example: Tere Liye
        type: string
      book_id:
        example: b2a0f3c4-5d8e-4c1b-9f7e-2d3f4e5a6b7c
        type: string
      isbn:
        example: 978-3-16-148410-0
        type: string
      published_at:
        example: "2016-01-28"
        type: string
      publisher:
        example: Gramedia
        type: string
      stock:
        example: 200
        type: integer
      title:
        example: Hujan
        type: string
    type: object
  model.CreateBookRequest:
    properties:
      author:
        example: Tere Liye
        type: string
      isbn:
        example: "9783161484100"
        type: string
      published_at:
        example: "2016-01-28"
        type: string
      publisher:
        example: Gramedia
        type: string
      stock:
        example: 200
        minimum: 0
        type: integer
      title:
        example: Hujan
        type: string
    required:
    - author
    - isbn
    - published_at
    - publisher
    - stock
    - title
    type: object
  model.DataResponse-model_BookResponse:
    properties:
      data:
        $ref: '#/definitions/model.BookResponse'
    type: object
  model.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: Bad Request
        type: string
      message:
        example: Invalid request payload
        type: string
      path:
        example: /books
        type: string
      timestamp:
        example: "2023-12-01T12:34:56Z"
        type: string
    type: object
  model.PaginatedResponse-model_BookResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.BookResponse'
        type: array
      links:
        $ref: '#/definitions/model.PaginationLinks'
      meta:
        $ref: '#/definitions/model.PaginationMeta'
    type: object
  model.PaginationLinks:
    properties:
      first:
        example: /api/v1/books?offset=0&limit=10
        type: string
      last:
        example: /api/v1/books?offset=90&limit=10
        type: string
      next:
        example: /api/v1/books?offset=10&limit=10
        type: string
      prev:
        example: /api/v1/books?offset=0&limit=10
        type: string
      self:
        example: /api/v1/books?offset=0&limit=10
        type: string
    type: object
  model.PaginationMeta:
    properties:
      limit:
        example: 10
        type: integer
      offset:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  model.UpdateBookRequest:
    properties:
      author:
        example: Tere Liye
        type: string
      book_id:
        example: b2a0f3c4-5d8e-4c1b-9f7e-2d3f4e5a6b7c
        type: string
      isbn:
        example: "9783161484100"
        type: string
      published_at:
        example: "2016-01-28"
        type: string
      publisher:
        example: Gramedia
        type: string
      stock:
        example: 200
        minimum: -1
        type: integer
      title:
        example: Hujan
        type: string
    required:
    - book_id
    type: object
info:
  contact: {}
  description: Backend API service for Book Stock Manager
  title: Book Stock Manager API
  version: 0.0.1
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a list of books with pagination support including navigation
        links
      parameters:
      - description: 'Page offset (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Page limit (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Books information with pagination metadata and navigation links
          schema:
            $ref: '#/definitions/model.PaginatedResponse-model_BookResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get books with pagination
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Update book information partially. For stock field, use -1 as a
        sentinel value to indicate no update is intended.
      parameters:
      - description: Request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated successfully
          schema:
            $ref: '#/definitions/model.DataResponse-model_BookResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update book
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with the provided information
      parameters:
      - description: Request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/model.DataResponse-model_BookResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Create a new book
      tags:
      - books
  /books/{book_id}:
    delete:
      consumes:
      - application/json
      description: Delete book by ID
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Book deleted successfully
          schema:
            type: string
        "400":
          description: Invalid Book ID format or Book ID is required
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a book information by ID
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book information retrieved successfully
          schema:
            $ref: '#/definitions/model.DataResponse-model_BookResponse'
        "400":
          description: Invalid Book ID format or Book ID is required
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get book by ID
      tags:
      - books
  /books/isbn/{isbn}:
    get:
      consumes:
      - application/json
      description: Get a book information by ISBN
      parameters:
      - description: ISBN
        in: path
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book information retrieved successfully
          schema:
            $ref: '#/definitions/model.DataResponse-model_BookResponse'
        "400":
          description: Invalid ISBN format or ISBN is required
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get book by ISBN
      tags:
      - books
swagger: "2.0"
